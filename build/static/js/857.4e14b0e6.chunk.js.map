{"version":3,"file":"static/js/857.4e14b0e6.chunk.js","mappings":"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","sources":["webpack://react-https-tasks/./src/components/comments/Comments.module.css?d88e","webpack://react-https-tasks/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-https-tasks/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-https-tasks/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js","webpack://react-https-tasks/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__LP1KL\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__vpG5I\",\"loading\":\"NewCommentForm_loading__ZTnKA\",\"control\":\"NewCommentForm_control__nN070\",\"actions\":\"NewCommentForm_actions__DFNYD\"};","import { useEffect, useRef } from 'react'\n\nimport classes from './NewCommentForm.module.css'\nimport useHttp from './../../hooks/use-http'\nimport { addComment } from '../../lib/api'\nimport LoadingSpinner from './../UI/LoadingSpinner'\n\nconst NewCommentForm = props => {\n    const commentTextRef = useRef()\n    const quoteId = props.quoteId\n    const { sendRequest, status, error } = useHttp(addComment)\n\n    const submitFormHandler = event => {\n        event.preventDefault()\n        console.log('quoteId', quoteId)\n        sendRequest({\n            commentData: { text: commentTextRef.current.value },\n            quoteId: quoteId,\n        })\n    }\n\n    const { onAddedComment } = props\n\n    useEffect(() => {\n        if (status === 'completed' && !error) {\n            onAddedComment()\n        }\n    }, [status, error, onAddedComment])\n\n    return (\n        <form className={classes.form} onSubmit={submitFormHandler}>\n            {status === 'pending' && (\n                <div className='centered'>\n                    <LoadingSpinner />\n                </div>\n            )}\n            <div className={classes.control} onSubmit={submitFormHandler}>\n                <label htmlFor='comment'>Your Comment</label>\n                <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n            </div>\n            <div className={classes.actions}>\n                <button className='btn'>Add Comment</button>\n            </div>\n        </form>\n    )\n}\n\nexport default NewCommentForm\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__j5Kgh\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__gEib9\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\n\nimport useHttp from '../../hooks/use-http'\nimport { getAllComments } from '../../lib/api'\nimport LoadingSpinner from '../UI/LoadingSpinner'\nimport classes from './Comments.module.css'\nimport NewCommentForm from './NewCommentForm'\nimport CommentsList from './CommentsList'\n\nconst Comments = () => {\n    const params = useParams()\n    const { quoteId } = params\n    const [isAddingComment, setIsAddingComment] = useState(false)\n    const {\n        sendRequest,\n        status,\n        data: loadedComments,\n    } = useHttp(getAllComments, true)\n\n    const startAddCommentHandler = () => {\n        setIsAddingComment(true)\n    }\n\n    useEffect(() => {\n        sendRequest(quoteId)\n    }, [sendRequest, quoteId])\n\n    const addCommentHandler = useCallback(() => {\n        sendRequest(quoteId)\n    }, [sendRequest, quoteId])\n\n    let comments\n\n    if (status === 'pending') {\n        comments = (\n            <div className='centered'>\n                <LoadingSpinner />\n            </div>\n        )\n    }\n\n    if (status === 'completed' && loadedComments && loadedComments.length) {\n        comments = <CommentsList comments={loadedComments} />\n    }\n\n    if (status === 'completed' && (!loadedComments || !loadedComments.length)) {\n        comments = <p className='centered'>No comments were added yet!</p>\n    }\n\n    return (\n        <section className={classes.comments}>\n            <h2>User Comments</h2>\n            {!isAddingComment && (\n                <button className='btn' onClick={startAddCommentHandler}>\n                    Add a Comment\n                </button>\n            )}\n            {isAddingComment && (\n                <NewCommentForm\n                    quoteId={quoteId}\n                    onAddedComment={addCommentHandler}\n                />\n            )}\n            {comments}\n        </section>\n    )\n}\n\nexport default Comments\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__GLxHZ\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment, useEffect } from 'react'\r\nimport { Link, Route, useParams, useRouteMatch } from 'react-router-dom'\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner'\r\n\r\nimport useHttp from '../hooks/use-http'\r\nimport { getSingleQuote } from '../lib/api'\r\n\r\nimport Comments from './../components/comments/Comments'\r\nimport HighlightedQuote from './../components/quotes/HighlightedQuote'\r\n\r\nconst QuoteDetail = () => {\r\n    const params = useParams()\r\n    const match = useRouteMatch()\r\n    const { quoteId } = params\r\n    const {\r\n        sendRequest,\r\n        status,\r\n        data: loadedQuote,\r\n        error,\r\n    } = useHttp(getSingleQuote, true)\r\n\r\n    useEffect(() => {\r\n        sendRequest(quoteId)\r\n    }, [sendRequest, quoteId])\r\n\r\n    if (status === 'pending') {\r\n        return (\r\n            <div className='centered'>\r\n                <LoadingSpinner />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (error) {\r\n        return <p className='centered'>{error}</p>\r\n    }\r\n    if (!loadedQuote.text) {\r\n        return <p className='centered'>Quote not found !</p>\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <HighlightedQuote {...loadedQuote} />\r\n            <Route path={match.path} exact>\r\n                <div className='centered'>\r\n                    <Link className='btn--flat' to={`${match.url}/comments`}>\r\n                        Load Comments\r\n                    </Link>\r\n                </div>\r\n            </Route>\r\n            <Route path={`${match.path}/comments`}>\r\n                <Comments />\r\n            </Route>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default QuoteDetail\r\n"],"names":["props","commentTextRef","useRef","quoteId","useHttp","addComment","sendRequest","status","error","submitFormHandler","event","preventDefault","console","log","commentData","text","current","value","onAddedComment","useEffect","className","classes","onSubmit","LoadingSpinner","htmlFor","id","rows","ref","comments","map","comment","useParams","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","addCommentHandler","useCallback","length","onClick","author","params","match","useRouteMatch","getSingleQuote","loadedQuote","Fragment","path","exact","to","url"],"sourceRoot":""}